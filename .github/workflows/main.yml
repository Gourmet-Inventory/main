name: CI/CD Pipeline

on:
  workflow_dispatch: # Permite executar manualmente o pipeline

jobs:
  # Job 1: Testar e construir o projeto
  prepare-and-build:
    runs-on: ubuntu-latest

    steps:
      # Etapa 1: Clonar o repositório
      - name: Checkout repository
        uses: actions/checkout@v3

      # Etapa 2: Configurar o JDK
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Etapa 3: Cache das dependências do Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Etapa 4: Rodar testes e buildar o projeto
      - name: Run tests and build
        run: cd gourmet-inventory-project && mvn clean package -DskipTests -Dmaven.repo.local=~/.m2/repository

      # Etapa 5.1: Verificar o conteúdo dos arquivos baixados
      - name: List root
        run: ls -la

      # Etapa 5: Mover o Dockerfile para o diretório do .jar
      - name: Move Dockerfile to target directory
        run: cp Dockerfile gourmet-inventory-project/target/

      # Salvar o jar e o Dockerfile como artefato para compartilhar com outros jobs
      - name: Upload jar and Dockerfile as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: gourmet-inventory-project/target/

  # Job 2: Fazer login no Docker Hub
  docker-login:
    runs-on: ubuntu-latest
    needs: prepare-and-build # Este job só executa após o sucesso do prepare-and-build

    steps:
      # Etapa 1: Fazer login no Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  # Job 3: Construir e enviar a imagem Docker
  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: [prepare-and-build, docker-login] # Este job só executa após os outros dois jobs

    steps:
      # Etapa 1: Baixar o jar e o Dockerfile gerados no job anterior
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      # Etapa 2: Verificar o conteúdo dos arquivos baixados
      - name: List downloaded artifacts
        run: ls -la

      # Etapa 3: Construir a imagem Docker
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/gourmet-inventory:latest .

      # Etapa 4: Enviar a imagem Docker para o Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/gourmet-inventory:latest
